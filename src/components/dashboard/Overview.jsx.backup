import React, { useState, useEffect } from 'react';
import { LineChart, Line, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { Activity, TrendingUp, TrendingDown, Gauge as GaugeIcon, BarChart3, CheckCircle, XCircle } from 'lucide-react';
import { useMultipleSensors } from '../../hooks/useSensorData';
import { useMQTT } from '../../hooks/useMQTT';

// Circular Gauge Component
const CircularGauge = ({ value, min = 0, max = 100, unit, label, color, warningThreshold = 70, criticalThreshold = 90 }) => {
  const percentage = ((value - min) / (max - min)) * 100;
  const circumference = 2 * Math.PI * 65;
  const strokeDashoffset = circumference - (percentage / 100) * circumference;

  const getColor = () => {
    if (percentage >= criticalThreshold) return '#e52929'; // red
    if (percentage >= warningThreshold) return '#f59e0b'; // amber
    return color;
  };

  const getStatus = () => {
    if (percentage >= criticalThreshold) return { text: 'Critical', icon: XCircle };
    if (percentage >= warningThreshold) return { text: 'Warning', icon: Activity };
    return { text: 'Normal', icon: CheckCircle };
  };

  const status = getStatus();
  const gaugeColor = getColor();
  const StatusIcon = status.icon;

  return (
    <div className="bg-white rounded-lg p-6 shadow-sm border border-gray-100 hover:shadow-md transition-all duration-200">
      <div className="flex items-center justify-between mb-5">
        <h3 className="text-sm font-bold text-[#4a4b65] tracking-wide uppercase">{label}</h3>
        <StatusIcon className="w-4 h-4" style={{ color: gaugeColor }} />
      </div>

      <div className="relative flex justify-center items-center mb-5">
        <svg width="150" height="150" className="transform -rotate-90">
          {/* Background Circle */}
          <circle
            cx="75"
            cy="75"
            r="65"
            stroke="#e8e9eb"
            strokeWidth="10"
            fill="none"
          />
          {/* Progress Circle */}
          <circle
            cx="75"
            cy="75"
            r="65"
            stroke={gaugeColor}
            strokeWidth="10"
            fill="none"
            strokeDasharray={circumference}
            strokeDashoffset={strokeDashoffset}
            strokeLinecap="round"
            style={{ transition: 'stroke-dashoffset 0.5s ease' }}
          />
        </svg>

        <div className="absolute inset-0 flex flex-col items-center justify-center">
          <span className="text-4xl font-bold text-[#2c3e50]">
            {value.toFixed(1)}
          </span>
          <span className="text-xs text-[#737491] font-medium mt-1">{unit}</span>
        </div>
      </div>

      <div className="flex items-center justify-between text-xs pt-3 border-t border-gray-100">
        <span className="text-[#737491]">Min: {min}</span>
        <span className={`font-bold px-3 py-1 rounded`} style={{ backgroundColor: `${gaugeColor}15`, color: gaugeColor }}>
          {status.text}
        </span>
        <span className="text-[#737491]">Max: {max}</span>
      </div>
    </div>
  );
};

// Mini Line Chart Component
const MiniLineChart = ({ data, color, label, value, unit, trend }) => {
  return (
    <div className="bg-white rounded-lg p-5 shadow-sm border border-gray-100 hover:shadow-md transition-all duration-200">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-sm font-bold text-[#4a4b65] tracking-wide uppercase">{label}</h3>
        <div className={`flex items-center space-x-1 px-2 py-1 rounded text-xs font-bold ${
          trend >= 0 ? 'bg-[#69a71f]/10 text-[#69a71f]' : 'bg-[#e52929]/10 text-[#e52929]'
        }`}>
          {trend >= 0 ? <TrendingUp className="w-3 h-3" /> : <TrendingDown className="w-3 h-3" />}
          <span>{Math.abs(trend).toFixed(1)}%</span>
        </div>
      </div>

      <div className="flex items-baseline space-x-2 mb-4">
        <span className="text-3xl font-bold text-[#2c3e50]">
          {value.toFixed(1)}
        </span>
        <span className="text-sm text-[#737491] font-medium">{unit}</span>
      </div>

      <ResponsiveContainer width="100%" height={60}>
        <AreaChart data={data}>
          <defs>
            <linearGradient id={`gradient-${label}`} x1="0" y1="0" x2="0" y2="1">
              <stop offset="5%" stopColor={color} stopOpacity={0.2}/>
              <stop offset="95%" stopColor={color} stopOpacity={0}/>
            </linearGradient>
          </defs>
          <Area
            type="monotone"
            dataKey="value"
            stroke={color}
            strokeWidth={2}
            fill={`url(#gradient-${label})`}
            dot={false}
          />
        </AreaChart>
      </ResponsiveContainer>
    </div>
  );
};


// Real-time Multi-line Chart
const RealTimeChart = ({ temperature, humidity, pressure, vibration }) => {
  const [chartData, setChartData] = useState([]);

  useEffect(() => {
    const data = [];
    const length = Math.min(
      temperature.history.length,
      humidity.history.length,
      pressure.history.length,
      vibration.history.length
    );

    for (let i = Math.max(0, length - 20); i < length; i++) {
      data.push({
        time: new Date(temperature.history[i]?.timestamp || Date.now()).toLocaleTimeString(),
        temperature: temperature.history[i]?.value || 0,
        humidity: humidity.history[i]?.value || 0,
        pressure: pressure.history[i]?.value || 0,
        vibration: vibration.history[i]?.value || 0,
      });
    }

    setChartData(data);
  }, [temperature, humidity, pressure, vibration]);

  const CustomTooltip = ({ active, payload }) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-white p-4 rounded-lg shadow-lg border border-gray-200">
          <p className="font-bold text-[#2c3e50] mb-2 text-sm">{payload[0].payload.time}</p>
          <div className="space-y-1.5">
            {payload.map((entry, index) => (
              <div key={index} className="flex items-center justify-between space-x-4">
                <span className="text-xs font-medium text-[#4a4b65]">
                  {entry.name}:
                </span>
                <span className="text-xs font-bold" style={{ color: entry.color }}>
                  {entry.value.toFixed(2)}
                </span>
              </div>
            ))}
          </div>
        </div>
      );
    }
    return null;
  };

  return (
    <div className="bg-white rounded-lg p-6 shadow-sm border border-gray-100 h-full flex flex-col">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-lg font-bold text-[#2c3e50]">Real-Time Sensor Data</h3>
          <p className="text-sm text-[#737491]">Live monitoring across all sensors</p>
        </div>
        <div className="p-2 rounded-lg bg-[#e52929]/5">
          <Activity className="w-5 h-5 text-[#e52929] animate-pulse" />
        </div>
      </div>

      <div className="flex-1">
        <ResponsiveContainer width="100%" height="100%">
        <LineChart data={chartData}>
          <CartesianGrid strokeDasharray="3 3" stroke="#e8e9eb" />
          <XAxis
            dataKey="time"
            stroke="#737491"
            style={{ fontSize: '11px', fontWeight: 500, fontFamily: 'Roboto' }}
          />
          <YAxis
            stroke="#737491"
            style={{ fontSize: '11px', fontWeight: 500, fontFamily: 'Roboto' }}
          />
          <Tooltip content={<CustomTooltip />} />
          <Line
            type="monotone"
            dataKey="temperature"
            stroke="#e52929"
            strokeWidth={2.5}
            dot={false}
            name="Temperature"
          />
          <Line
            type="monotone"
            dataKey="humidity"
            stroke="#2563eb"
            strokeWidth={2.5}
            dot={false}
            name="Humidity"
          />
          <Line
            type="monotone"
            dataKey="pressure"
            stroke="#69a71f"
            strokeWidth={2.5}
            dot={false}
            name="Pressure"
          />
          <Line
            type="monotone"
            dataKey="vibration"
            stroke="#d97706"
            strokeWidth={2.5}
            dot={false}
            name="Vibration"
          />
        </LineChart>
        </ResponsiveContainer>
      </div>

      <div className="grid grid-cols-4 gap-3 mt-5 pt-4 border-t border-gray-100">
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 rounded-sm bg-[#e52929]"></div>
          <span className="text-xs font-medium text-[#4a4b65]">Temperature</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 rounded-sm bg-blue-600"></div>
          <span className="text-xs font-medium text-[#4a4b65]">Humidity</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 rounded-sm bg-[#69a71f]"></div>
          <span className="text-xs font-medium text-[#4a4b65]">Pressure</span>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 rounded-sm bg-amber-600"></div>
          <span className="text-xs font-medium text-[#4a4b65]">Vibration</span>
        </div>
      </div>
    </div>
  );
};

// Alert Card Component
const AlertCard = ({ type, message, timestamp, sensor, value }) => {
  const config = {
    critical: {
      bg: 'bg-white',
      border: 'border-l-4 border-[#e52929]',
      dot: 'bg-[#e52929]',
      textColor: 'text-[#e52929]',
      label: 'CRITICAL',
      labelBg: 'bg-[#e52929]/10'
    },
    warning: {
      bg: 'bg-white',
      border: 'border-l-4 border-amber-500',
      dot: 'bg-amber-500',
      textColor: 'text-amber-600',
      label: 'WARNING',
      labelBg: 'bg-amber-500/10'
    },
    info: {
      bg: 'bg-white',
      border: 'border-l-4 border-[#69a71f]',
      dot: 'bg-[#69a71f]',
      textColor: 'text-[#69a71f]',
      label: 'INFO',
      labelBg: 'bg-[#69a71f]/10'
    }
  };

  const cfg = config[type];

  return (
    <div className={`${cfg.bg} ${cfg.border} rounded-lg p-4 shadow-sm border-r border-t border-b border-gray-100 hover:shadow-md transition-shadow`}>
      <div className="flex items-start justify-between mb-2">
        <div className="flex items-center space-x-2">
          <div className={`w-2 h-2 rounded-full ${cfg.dot} animate-pulse`}></div>
          <span className={`text-xs font-bold ${cfg.textColor} ${cfg.labelBg} px-2 py-1 rounded`}>{cfg.label}</span>
        </div>
        <span className="text-xs text-[#737491]">{timestamp}</span>
      </div>
      <p className="text-sm font-medium text-[#2c3e50] mb-2">{message}</p>
      <div className="flex items-center justify-between text-xs">
        <span className="text-[#737491]">{sensor}</span>
        {value && <span className={`font-bold ${cfg.textColor}`}>{value}</span>}
      </div>
    </div>
  );
};

const Overview = () => {
  const { temperature, humidity, pressure, vibration } = useMultipleSensors();
  const { isConnected } = useMQTT();

  const calculateTrend = (history) => {
    if (history.length < 2) return 0;
    const latest = history[history.length - 1]?.value || 0;
    const previous = history[history.length - 2]?.value || 0;
    return previous !== 0 ? ((latest - previous) / previous) * 100 : 0;
  };

  // Generate dynamic alerts based on sensor data
  const alerts = [];

  // Check temperature
  if (temperature.current > 80) {
    alerts.push({
      type: 'critical',
      message: 'Temperature critical - immediate action required',
      timestamp: new Date().toLocaleTimeString(),
      sensor: 'Temperature Sensor',
      value: `${temperature.current.toFixed(1)}°C`
    });
  } else if (temperature.current > 60) {
    alerts.push({
      type: 'warning',
      message: 'Temperature above normal operating range',
      timestamp: new Date().toLocaleTimeString(),
      sensor: 'Temperature Sensor',
      value: `${temperature.current.toFixed(1)}°C`
    });
  }

  // Check humidity
  if (humidity.current > 85) {
    alerts.push({
      type: 'warning',
      message: 'High humidity detected - check ventilation',
      timestamp: new Date().toLocaleTimeString(),
      sensor: 'Humidity Sensor',
      value: `${humidity.current.toFixed(1)}%`
    });
  }

  // Check vibration
  if (vibration.current > 8) {
    alerts.push({
      type: 'critical',
      message: 'Excessive vibration - potential equipment failure',
      timestamp: new Date().toLocaleTimeString(),
      sensor: 'Vibration Sensor',
      value: `${vibration.current.toFixed(1)} mm/s`
    });
  } else if (vibration.current > 6) {
    alerts.push({
      type: 'warning',
      message: 'Vibration levels elevated - monitor closely',
      timestamp: new Date().toLocaleTimeString(),
      sensor: 'Vibration Sensor',
      value: `${vibration.current.toFixed(1)} mm/s`
    });
  }

  // Add info if no critical/warning alerts
  if (alerts.length === 0) {
    alerts.push({
      type: 'info',
      message: 'All systems operating normally',
      timestamp: new Date().toLocaleTimeString(),
      sensor: 'System Monitor',
      value: null
    });
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-50 p-10">
      {/* Subtle Decorative Elements */}
      <div className="fixed inset-0 pointer-events-none overflow-hidden">
        {/* Thin decorative lines inspired by Innovillage */}
        <div className="absolute top-32 left-0 w-64 h-px bg-gradient-to-r from-transparent via-[#e52929]/20 to-transparent"></div>
        <div className="absolute top-64 right-0 w-96 h-px bg-gradient-to-l from-transparent via-[#69a71f]/20 to-transparent"></div>
        <div className="absolute bottom-1/3 left-1/4 w-48 h-px bg-gradient-to-r from-transparent via-[#34694e]/15 to-transparent"></div>

        {/* Subtle geometric shapes */}
        <div className="absolute top-20 right-20 w-32 h-32 border border-[#e52929]/10 rounded-lg rotate-12"></div>
        <div className="absolute bottom-32 left-16 w-24 h-24 border border-[#69a71f]/10 rounded-full"></div>
      </div>

      {/* Header */}
      <div className="mb-12 relative z-10">
        <div className="flex items-center justify-between">
          <div>
            <div className="flex items-center space-x-3 mb-3">
              <div className="w-1 h-8 bg-[#e52929] rounded-full"></div>
              <h1 className="text-4xl font-bold text-[#2c3e50] tracking-tight">
                System Monitoring
              </h1>
            </div>
            <p className="text-[#737491] text-base ml-4">Real-time industrial sensor monitoring and control dashboard</p>
          </div>

          {/* MQTT Status */}
          <div className={`flex items-center space-x-3 px-6 py-3 rounded-lg border-2 ${
            isConnected
              ? 'bg-white border-[#69a71f] shadow-sm'
              : 'bg-white border-[#e52929] shadow-sm'
          }`}>
            {isConnected ? (
              <CheckCircle className="w-5 h-5 text-[#69a71f]" />
            ) : (
              <XCircle className="w-5 h-5 text-[#e52929]" />
            )}
            <div>
              <p className="text-xs font-medium text-[#737491]">MQTT Broker</p>
              <p className={`text-sm font-bold ${isConnected ? 'text-[#69a71f]' : 'text-[#e52929]'}`}>
                {isConnected ? 'Connected' : 'Disconnected'}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Circular Gauges Section */}
      <div className="mb-10 relative z-10">
        <div className="flex items-center space-x-3 mb-6">
          <div className="w-1 h-6 bg-[#e52929] rounded-full"></div>
          <h2 className="text-2xl font-bold text-[#2c3e50]">Live Sensor Gauges</h2>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <CircularGauge
            value={temperature.current}
            min={0}
            max={100}
            unit="°C"
            label="Temperature"
            color="#e52929"
            warningThreshold={60}
            criticalThreshold={80}
          />
          <CircularGauge
            value={humidity.current}
            min={0}
            max={100}
            unit="%"
            label="Humidity"
            color="#2563eb"
            warningThreshold={70}
            criticalThreshold={85}
          />
          <CircularGauge
            value={pressure.current}
            min={0}
            max={10}
            unit="bar"
            label="Pressure"
            color="#69a71f"
            warningThreshold={70}
            criticalThreshold={90}
          />
          <CircularGauge
            value={vibration.current}
            min={0}
            max={10}
            unit="mm/s"
            label="Vibration"
            color="#d97706"
            warningThreshold={60}
            criticalThreshold={80}
          />
        </div>
      </div>

      {/* Charts Section */}
      <div className="mb-10 relative z-10">
        <RealTimeChart
          temperature={temperature}
          humidity={humidity}
          pressure={pressure}
          vibration={vibration}
        />
      </div>

      {/* Mini Line Charts */}
      <div className="mb-10 relative z-10">
        <div className="flex items-center space-x-3 mb-6">
          <div className="w-1 h-6 bg-[#e52929] rounded-full"></div>
          <h2 className="text-2xl font-bold text-[#2c3e50]">Sensor Trends</h2>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <MiniLineChart
            data={temperature.history.slice(-10).map((item, idx) => ({
              time: idx,
              value: item.value
            }))}
            color="#e52929"
            label="Temperature"
            value={temperature.current}
            unit="°C"
            trend={calculateTrend(temperature.history)}
          />
          <MiniLineChart
            data={humidity.history.slice(-10).map((item, idx) => ({
              time: idx,
              value: item.value
            }))}
            color="#2563eb"
            label="Humidity"
            value={humidity.current}
            unit="%"
            trend={calculateTrend(humidity.history)}
          />
          <MiniLineChart
            data={pressure.history.slice(-10).map((item, idx) => ({
              time: idx,
              value: item.value
            }))}
            color="#69a71f"
            label="Pressure"
            value={pressure.current}
            unit="bar"
            trend={calculateTrend(pressure.history)}
          />
          <MiniLineChart
            data={vibration.history.slice(-10).map((item, idx) => ({
              time: idx,
              value: item.value
            }))}
            color="#d97706"
            label="Vibration"
            value={vibration.current}
            unit="mm/s"
            trend={calculateTrend(vibration.history)}
          />
        </div>
      </div>

      {/* Alerts & Notifications */}
      <div className="mb-10 relative z-10">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            <div className="w-1 h-6 bg-[#e52929] rounded-full"></div>
            <h2 className="text-2xl font-bold text-[#2c3e50]">Recent Alerts</h2>
          </div>
          <span className="text-sm text-[#737491] bg-white px-4 py-2 rounded-lg border border-gray-100">
            {alerts.length} {alerts.length === 1 ? 'alert' : 'alerts'}
          </span>
        </div>
        <div className="space-y-3">
          {alerts.map((alert, index) => (
            <AlertCard key={index} {...alert} />
          ))}
        </div>
      </div>

      {/* System Statistics */}
      <div className="mt-10 bg-[#2c3e50] rounded-lg p-8 shadow-sm text-white relative z-10 border border-[#34694e]/20">
        <div className="flex items-center space-x-3 mb-8">
          <div className="w-1 h-6 bg-[#e52929] rounded-full"></div>
          <h3 className="text-2xl font-bold">System Statistics</h3>
        </div>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
          <div className="bg-white/5 rounded-lg p-6 border border-white/10 hover:bg-white/10 transition-colors">
            <p className="text-sm text-gray-300 mb-3 font-medium">Uptime</p>
            <p className="text-3xl font-bold text-[#69a71f]">99.8%</p>
          </div>
          <div className="bg-white/5 rounded-lg p-6 border border-white/10 hover:bg-white/10 transition-colors">
            <p className="text-sm text-gray-300 mb-3 font-medium">Active Sensors</p>
            <p className="text-3xl font-bold text-[#69a71f]">4/4</p>
          </div>
          <div className="bg-white/5 rounded-lg p-6 border border-white/10 hover:bg-white/10 transition-colors">
            <p className="text-sm text-gray-300 mb-3 font-medium">Data Points</p>
            <p className="text-3xl font-bold text-blue-400">12.5K</p>
          </div>
          <div className="bg-white/5 rounded-lg p-6 border border-white/10 hover:bg-white/10 transition-colors">
            <p className="text-sm text-gray-300 mb-3 font-medium">Last Update</p>
            <p className="text-3xl font-bold text-blue-400">2s ago</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Overview;
